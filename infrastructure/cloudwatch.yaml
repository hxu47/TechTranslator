AWSTemplateFormatVersion: '2010-09-09'
Description: 'TechTranslator - Monitoring and Governance Stack'

Parameters:
  ProjectName:
    Type: String
    Default: TechTranslator
    Description: Name of the project
  LambdaStackName:
    Type: String
    Default: tech-translator-lambda
    Description: Name of the Lambda stack
  ApiStackName:
    Type: String
    Default: tech-translator-api
    Description: Name of the API Gateway stack
  DynamoDBStackName:
    Type: String
    Default: tech-translator-dynamodb
    Description: Name of the DynamoDB stack

Resources:
  # CloudWatch Dashboard
  TechTranslatorDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-Dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaStackName}-main" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Invocations", ".", "." ],
                  [ ".", "Duration", "FunctionName", "${LambdaStackName}-conversation" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Invocations", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Performance Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${ProjectName}-api" ],
                  [ ".", "Latency", ".", "." ],
                  [ ".", "4XXError", ".", "." ],
                  [ ".", "5XXError", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${DynamoDBStackName}-vector-storage" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ],
                  [ ".", "ConsumedReadCapacityUnits", "TableName", "${DynamoDBStackName}-conversation-history" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "DynamoDB Capacity Usage",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${LambdaStackName}-main'\n| fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Lambda Errors",
                "view": "table"
              }
            }
          ]
        }

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-Lambda-High-Error-Rate'
      AlarmDescription: 'Lambda function error rate is too high'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: 
            Fn::ImportValue: !Sub '${LambdaStackName}-MainLambdaFunctionName'
      TreatMissingData: notBreaching

  ApiGatewayLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-API-High-Latency'
      AlarmDescription: 'API Gateway latency is too high'
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub '${ProjectName}-api'
      TreatMissingData: notBreaching

  # Log Groups with retention policy
  MainLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaStackName}-main'
      RetentionInDays: 14

  ConversationLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaStackName}-conversation'
      RetentionInDays: 14

  # Custom Metric for SageMaker Integration
  SageMakerHealthMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref MainLambdaLogGroup
      FilterPattern: '[timestamp, requestId, level="ERROR", message="SageMaker*"]'
      MetricTransformations:
        - MetricNamespace: !Sub '${ProjectName}/Custom'
          MetricName: SageMakerErrors
          MetricValue: '1'
          DefaultValue: 0

Outputs:
  DashboardUrl:
    Description: URL to the CloudWatch Dashboard
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-Dashboard'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardUrl'

  AlarmNames:
    Description: List of created alarms
    Value: !Sub '${LambdaErrorAlarm}, ${ApiGatewayLatencyAlarm}'
    Export:
      Name: !Sub '${AWS::StackName}-AlarmNames'