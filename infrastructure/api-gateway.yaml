AWSTemplateFormatVersion: '2010-09-09'
Description: 'TechTranslator - API Gateway with Authentication Enabled'

Parameters:
  ProjectName:
    Type: String
    Default: TechTranslator
    Description: Name of the project, used as prefix for resource names
  LambdaStackName:
    Type: String
    Default: tech-translator-lambda
    Description: Name of the Lambda stack
  CognitoStackName:
    Type: String
    Default: tech-translator-cognito
    Description: Name of the Cognito stack
  EnableAuthForQuery:
    Type: String
    Default: "true"  # Changed from "false" to "true"
    AllowedValues: ["true", "false"]
    Description: Whether to enable Cognito authentication for the query endpoint

Conditions:
  UseAuthForQuery: !Equals [!Ref EnableAuthForQuery, "true"]

Resources:
  # API Gateway REST API
  TechTranslatorApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api'
      Description: 'API for TechTranslator application with authentication'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Authorizer using Cognito
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub '${ProjectName}-cognito-authorizer'
      RestApiId: !Ref TechTranslatorApi
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Sub 
          - 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'
          - UserPoolId: 
              Fn::ImportValue: !Sub '${CognitoStackName}-UserPoolId'

  # API Gateway Resource for /query endpoint
  QueryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TechTranslatorApi
      ParentId: !GetAtt TechTranslatorApi.RootResourceId
      PathPart: 'query'

  # API Gateway Resource for /conversation endpoint
  ConversationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TechTranslatorApi
      ParentId: !GetAtt TechTranslatorApi.RootResourceId
      PathPart: 'conversation'

  # API Gateway Method for /query POST - with authentication enabled
  QueryPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TechTranslatorApi
      ResourceId: !Ref QueryResource
      HttpMethod: POST
      AuthorizationType: !If [UseAuthForQuery, "COGNITO_USER_POOLS", "NONE"]
      AuthorizerId: !If [UseAuthForQuery, !Ref CognitoAuthorizer, !Ref "AWS::NoValue"]
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-MainLambdaFunctionArn'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '401'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Method for /query OPTIONS (Enhanced CORS for auth)
  QueryOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TechTranslatorApi
      ResourceId: !Ref QueryResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Max-Age: true

  # API Gateway Method for /conversation GET - with Auth
  ConversationGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TechTranslatorApi
      ResourceId: !Ref ConversationResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn:
              Fn::ImportValue: !Sub '${LambdaStackName}-ConversationLambdaFunctionArn'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '401'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Method for /conversation OPTIONS (CORS)
  ConversationOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TechTranslatorApi
      ResourceId: !Ref ConversationResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Max-Age: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - QueryPostMethod
      - QueryOptionsMethod
      - ConversationGetMethod
      - ConversationOptionsMethod
    Properties:
      RestApiId: !Ref TechTranslatorApi
      StageName: 'v1'

  # Lambda Permissions for API Gateway
  MainLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Fn::ImportValue: !Sub '${LambdaStackName}-MainLambdaFunctionName'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TechTranslatorApi}/*'

  ConversationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Fn::ImportValue: !Sub '${LambdaStackName}-ConversationLambdaFunctionName'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TechTranslatorApi}/*'

Outputs:
  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !Sub 'https://${TechTranslatorApi}.execute-api.${AWS::Region}.amazonaws.com/v1'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ApiGatewayId:
    Description: ID of the API Gateway
    Value: !Ref TechTranslatorApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'
      
  AuthenticationEnabled:
    Description: Whether authentication is enabled for the query endpoint
    Value: !Ref EnableAuthForQuery
    Export:
      Name: !Sub '${AWS::StackName}-AuthenticationEnabled'